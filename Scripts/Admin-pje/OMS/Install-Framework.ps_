## Orchestration credentials
$password = "76492d1116743f0423413b16050a5345MgB8ACsATAB0ADUARQAyADQAWQBmAGsAdwBaAHQAQgBtAEgARgBVAEMAYQBoAGcAPQA9AHwAMQA2AGIAMwAyAGMAYwA4AGEAYQA5ADIANwAxAGYAYQA4ADUANgBiAGIAMgAwADMAMwBhAGYAYgAzAGYAOQA4ADYAMQA3ADgANgA5ADkAZABmAGYAYwA3ADMAMwAzADUAOQA2ADIAOQA4AGIAYwAzAGMAMwA0ADEAMQBmAGUAYQA2ADcAOQA2ADcAZAAyADYANABlADEAZAAzADUAYQAwADkAZgBiADEAZgBmADcANwA1AGYAMABjAGIAOAA4ADUA"
$key = "86 238 141 64 11 66 201 110 204 26 199 11 55 151 172 232 38 153 188 64 18 75 132 90 18 190 222 122 218 166 91 144"
$passwordSecure = ConvertTo-SecureString -String $password -Key ([Byte[]]$key.Split(" "))
$cred = New-Object system.Management.Automation.PSCredential("service-scorchraa", $passwordSecure)

## Traverse serverlist
Get-Content "$(Split-Path -Parent $MyInvocation.MyCommand.Definition)\Servers.txt" | foreach{
    ## check connectivity and OS
    if(Test-Connection -ComputerName $_ -Count 1 -ErrorAction SilentlyContinue){
        if((gwmi win32_operatingsystem -ComputerName $_ -Filter "NOT version LIKE '5%'" -ErrorAction SilentlyContinue)){
            ## Execute remote command
            $result = Invoke-Command -ComputerName $_ -ScriptBlock {
                Import-module ServerManager
                return Get-WindowsFeature -Name AS-NET-Framework -ErrorAction Stop
            } -Credential $cred
            ## Log the result
            Out-File -InputObject $result "$(Split-Path -Parent $MyInvocation.MyCommand.Definition)\result.Log" -Append
        }
        else
        {
            ## Log servers not complient
            "$_ is Windows version 5 or less, NET-Framework-Core not installed" |
            Out-File "$(Split-Path -Parent $MyInvocation.MyCommand.Definition)\result.Log" -Append
        }
    }
}